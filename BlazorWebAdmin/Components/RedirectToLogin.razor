@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Project.Services
@inject NavigationManager NavigationManager
@inject UserStore UserStore
@inject RouterStore RouterStore
@inject MessageService MsgSrv
@inject ProtectedSessionStorage SessionStorage
@implements IDisposable

@if (CheckLogin)
{
    @*<Alert Type="@AlertType.Warning"
           Message="查询用户登录状态" />
    Console.WriteLine("???");*@
}
else
{
    @ChildContent
}

@code {
    [CascadingParameter]
    public RootLayout? Root { get; set; }
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Root!.OnNavigated += OnNavigated;
    }
    void OnNavigated(LocationChangedEventArgs e)
    {
        if (NavigationManager.Uri.Contains("/login"))
            return;
        if (string.IsNullOrEmpty(UserStore?.UserId))
        {
            _ = MsgSrv.Error("登录过期！请重新登录！");
            NavigationManager.NavigateTo("/login", true);
        }
    }
    bool CheckLogin = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var info = await SessionStorage.GetAsync<UserInfo>("UID");
            if (info.Success)
            {
                await UserStore.ReLogin(info.Value!);
                var url = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
                NavigationManager.NavigateTo(url);
                await RouterStore.TryAdd(url);
                StateHasChanged();
            }
            else
            {
                if (NavigationManager.Uri.Contains("/login"))
                    return;
                NavigationManager.NavigateTo("/login", true);
                _ = MsgSrv.Error("登录过期！请重新登录！");
            }
        }
        CheckLogin = false;
    }

    private bool disposedValue;
    protected virtual void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
                // TODO: 释放托管状态(托管对象)
                Root!.OnNavigated -= OnNavigated;
            }

            // TODO: 释放未托管的资源(未托管的对象)并重写终结器
            // TODO: 将大型字段设置为 null
            disposedValue = true;
        }
    }

    // // TODO: 仅当“Dispose(bool disposing)”拥有用于释放未托管资源的代码时才替代终结器
    // ~RootLayout()
    // {
    //     // 不要更改此代码。请将清理代码放入“Dispose(bool disposing)”方法中
    //     Dispose(disposing: false);
    // }

    public void Dispose()
    {
        // 不要更改此代码。请将清理代码放入“Dispose(bool disposing)”方法中
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }
}
