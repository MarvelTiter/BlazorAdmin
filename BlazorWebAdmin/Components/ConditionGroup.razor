@using BlazorWebAdmin.Template.Tables.Setting
@using System.Linq.Expressions
@using MT.KitTools.StringExtension
@typeparam TData
<Button Type=@ButtonType.Primary OnClick="AddCondition">增加条件</Button>
@for (var i = 0; i < Conditions.Count; i++)
{
	int index = i;
	<ConditionBuilder Columns=Columns InfoChanged=@(newInfo => Conditions[index] = newInfo)></ConditionBuilder>
	@if (ExpressionTypes.Count > index)
	{
		<Switch Checked="ExpressionTypes[index] == ExpressionType.And" CheckedChildren="并且" UnCheckedChildren="或者" OnChange=@(check => {
			if (check)
			{
				ExpressionTypes[index] = ExpressionType.And;
			}
			else
			{
				ExpressionTypes[index] = ExpressionType.Or ;
			}
		}) />
	}
}
<Button Type=@ButtonType.Primary OnClick="ConfirmCondition">确定</Button>
@code {
	[Parameter]
	public List<ColumnDefinition> Columns { get; set; }
	[Parameter]
	public Expression<Func<TData, bool>> Expression { get; set; }
	[Parameter]
	public EventCallback<Expression<Func<TData, bool>>> ExpressionChanged { get; set; }
	private List<ConditionInfo> Conditions = new List<ConditionInfo>();
	private List<ExpressionType> ExpressionTypes = new List<ExpressionType>();
	protected override void OnInitialized()
	{
		base.OnInitialized();
		Conditions.Add(new ConditionInfo("", CompareType.Equal, "", typeof(string), false));
	}
	void AddCondition()
	{
		Conditions.Add(new ConditionInfo("", CompareType.Equal, "", typeof(string), false));
		ExpressionTypes.Add(ExpressionType.And);
	}
	async void ConfirmCondition()
	{
		var exp = BuildCondition.CombineExpression<TData>(new Queue<ConditionInfo>(Conditions), new Queue<ExpressionType>(ExpressionTypes));
		Console.WriteLine(exp.ToString());
		await ExpressionChanged.InvokeAsync(exp);
	}

}
