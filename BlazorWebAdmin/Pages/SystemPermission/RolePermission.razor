@page "/rolepermission"
@using AntDesign.TableModels
@using BlazorWebAdmin.Template.Tables
<TwoSidePage OpenTrigger=@(() => CurrentRole != null)>
	<FirstSide>
		<TableTemplate TableOptions=roleOptions TData=Role TQuery=GeneralReq>
		</TableTemplate>
	</FirstSide>
	<SecondSide>
		<Space>
			<SpaceItem>
				<Descriptions Title="角色权限配置">
					<DescriptionsItem Title="角色名称">@CurrentRole?.RoleName</DescriptionsItem>
				</Descriptions>
			</SpaceItem>
			<SpaceItem>
				<Button Icon="close" OnClick="CloseSide"></Button>
			</SpaceItem>
		</Space>
		<Spin Spinning=powerLoading>
			<Tree DataSource="allpowers"
				  Checkable
				  Multiple
				  ShowLine
				  @ref="treeInstance"
				  @bind-CheckedKeys=selectedKeys
				  TitleExpression="x => x.DataItem.Node.PowerName"
				  KeyExpression="x => x.DataItem.Node.PowerId"
				  ChildrenExpression="x => x.DataItem.Children"
				  TItem="PowerTreeNode">
				<SwitcherIconTemplate>
					<Icon Type="down" />
				</SwitcherIconTemplate>
			</Tree>
		</Spin>
		<Space>
			<SpaceItem>
				<Button Type="primary" OnClick=SaveRolePower>确定</Button>
			</SpaceItem>
		</Space>
	</SecondSide>
	<ClosedView>
		<h1>权限列表</h1>
	</ClosedView>
</TwoSidePage>
@code {
	record PowerTreeNode(Power Node)
	{
		public IList<PowerTreeNode> Children { get; set; }
	}
	TableOptions<Role, GeneralReq> roleOptions = new TableOptions<Role, GeneralReq>();
	bool powerLoading = false;
	Role? CurrentRole;
	Tree<PowerTreeNode> treeInstance;
	IEnumerable<PowerTreeNode> allpowers;
	string[]? selectedKeys = Array.Empty<string>();
	protected override void OnInitialized()
	{
		base.OnInitialized();
		roleOptions.DataLoader = req =>
		{
			var roles = new List<Role>
									{
				new Role()
				{
					RoleId = "R001",
					RoleName = "管理员"
				},
				new()
				{
					RoleId = "R002",
					RoleName = "普通用户"
				}
									};
			var result = QueryResult<Role>.PagingResult(roles, 2);
			return Task.FromResult(result);
		};
		roleOptions.AddHandle = async () =>
		{
			var confirm = new ConfirmService();
			await confirm.Show("Test", "Hello");
			return true;
		};
		roleOptions.OnRowClick = HandleRowClick;
		var n1 = new PowerTreeNode(new Power() { PowerId = "P001", PowerName = "用户管理" });
		n1.Children = new List<PowerTreeNode>
				{
					new(new Power() { PowerId = "P002", PowerName = "测试1" }),
					new(new Power() { PowerId = "P003", PowerName = "测试2" }),
				};
		var n2 = new PowerTreeNode(new Power() { PowerId = "P004", PowerName = "用户管理2" });
		n2.Children = new List<PowerTreeNode>
				{
					new(new Power() { PowerId = "P005", PowerName = "测试3" }),
					new(new Power() { PowerId = "P006", PowerName = "测试4" }),
				};
		allpowers = new List<PowerTreeNode>
		{
			n1,
			n2,
		};
	}

	Task SaveRolePower()
	{
		if (selectedKeys is null) return Task.CompletedTask;

		foreach (var item in selectedKeys)
		{
			Console.WriteLine(item);
		}
		return Task.CompletedTask;
	}

	async Task HandleRowClick(RowData<Role> rowData)
	{
		powerLoading = true;
		CurrentRole = (rowData.Data);
		StateHasChanged();
		// load role powers
		await Task.Delay(1000);
		powerLoading = false;
		StateHasChanged();
	}
	void CloseSide()
	{
		powerLoading = false;
		CurrentRole = null;
	}
}
