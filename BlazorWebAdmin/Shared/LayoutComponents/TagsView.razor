@using BlazorWebAdmin.Common
@using BlazorWebAdmin.StoreData
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@*@inject ProtectedSessionStorage ProtectedSessionStore*@
@inject BlazorWebAdmin.Common.EventDispatcher dispatcher
@inject RouterStore store
@inject NavigationManager nav
<div class="tags_box">
	<span>
		<SvgIcon IconName="@IconName" OnClick="ToggleMenu"></SvgIcon>
	</span>
	<NavLink class="nav" href="/" Match="NavLinkMatch.All">主页</NavLink>
	@foreach (var item in store.AllLink)
	{
		<NavLink class="nav" href="@item.Link" Match="NavLinkMatch.All">
			<span @oncontextmenu="e => OpenContextMenu(e, item)" @oncontextmenu:preventDefault>@item.Link</span>
			@if (item.IsActive)
			{
				<span style="margin-left:5px;" @onclick="e => CloseTag(item)" @onclick:stopPropagation @onclick:preventDefault>x</span>
			}
		</NavLink>
	}

	<ul class="@ContextmenuClass.Class" style="left:@contextmenuLeft;top:@contextmenuTop">
		<li @onclick="e => CloseOther()">除此之外全部关闭</li>
		<li @onclick="e => CloseAll()">关闭全部选项卡</li>
		<li @onclick="e => CloseMenu()">关闭</li>
	</ul>
</div>

@code {

	private bool collapse = false;
	private string IconName => collapse ? "expand_menu" : "collapse_menu";
	public async Task ToggleMenu()
	{
		collapse = !collapse;
		await dispatcher.Invoke("MenuCollapse");
		StateHasChanged();
	}

	private ClassHelper ContextmenuClass = new ClassHelper().AddClass("context");
	protected override async Task OnInitializedAsync()
	{
		store.DataChangedEvent += StateHasChanged;
		ContextmenuClass.AddClass("open", () => showContextmenu);
		await base.OnInitializedAsync();
	}

	private async Task CloseTag(RouterInfo state)
	{
		await store.Remove(state.Link);
		nav.NavigateTo("/");
	}
	private bool showContextmenu = false;
	private string contextmenuLeft = "";
	private string contextmenuTop = "";
	private string current = "";
	private void OpenContextMenu(MouseEventArgs e, RouterInfo current)
	{
		this.current = current.Link;
		contextmenuLeft = $"{e.ClientX + 10}px";
		contextmenuTop = $"{e.ClientY + 10}px";
		this.showContextmenu = true;
	}

	private async Task CloseOther()
	{
		if (current == null) return;
		await store.Reset();
		nav.NavigateTo("/" + current);
		CloseMenu();
	}

	private async Task CloseAll()
	{
		await store.Reset();
		nav.NavigateTo("/");
		CloseMenu();
	}

	private void CloseMenu()
	{
		showContextmenu = false;
	}
}

<style>
	.tags_box {
		border-top: 1px solid #d8dce5;
		border-bottom: 1px solid #d8dce5;
		box-shadow: 0 2px 12px 0 rgb(0 0 0 / 10%);
		padding: 3px 0 3px 10px;
	}

	.nav {
		display: inline-block;
		margin: 0 3px;
		cursor: pointer;
		height: 26px;
		line-height: 26px;
		border: 1px solid #d8dce5;
		color: #495060;
		background: #fff;
		padding: 0 8px;
		font-size: 12px;
		text-decoration: none;
		transition: all 0.2s ease;
	}

		.nav.active {
			background-color: #42b983;
			color: #fff;
			border-color: #42b983;
		}

			.nav.active::before {
				content: '';
				background: #fff;
				display: inline-block;
				width: 8px;
				height: 8px;
				border-radius: 50%;
				position: relative;
				margin-right: 2px;
			}

	.context {
		padding: 10px;
		border: 1px solid #d8dce5;
		background-color: #fff;
		border-radius: 10px;
		position: absolute;
		display: none;
		box-shadow: 0 2px 12px 0 rgb(0 0 0 / 10%);
	}

		.context li {
			height: 26px;
			line-height: 26px;
			font-size: 14px;
			padding: 0 8px;
			color: #495060;
			cursor: pointer;
			list-style: none;
		}

			.context li:hover {
				color: #C0C0C0;
			}

		.context.open {
			display: block;
		}
</style>

