@page "/test"
@using Project.Constraints.Common.Attributes
@using Project.Constraints.Models.Permissions
@using Project.Constraints.Page
@using Project.Constraints.Services
@using Project.UI.AntBlazor
@using Project.Web.Shared.ComponentHelper
@attribute [PageInfo(Id = "TestPage", Title = "测试")]
@inherits BasicComponent
<MGrid MinWidth="300" Gap="10px">
    <MGridContent ColSpan="(1,3)" RowSpan="(1,3)">
        <div class="item" style="height:100%">123</div>
    </MGridContent>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
</MGrid>
UI.BuildCheckBoxGroup:
@(UI.BuildCheckBoxGroup<User, string>(this, users)
    .LabelExpression(u => u.UserName)
    .ValueExpression(u => u.UserId)
    .Bind(() => checkedUsers, Changed)
    .Render())
<br />AntDesign.CheckboxGroup:
<AntDesign.CheckboxGroup @bind-Value=checkedUsers
                         OnChange="Changed2"
                         Options="users.ConvertToCheckBoxOptions(u=>u.UserName, u=>u.UserId)">
</AntDesign.CheckboxGroup>
<br />
@(string.Join(",", checkedUsers ?? []))
<br />UI.BuildRadioGroup
@(UI.BuildRadioGroup<User, string>(this, users)
    .LabelExpression(u => u.UserName)
    .ValueExpression(u => u.UserId)
    .Bind(() => selectedUser, Changed)
    .Render())
&nbsp; selected: @selectedUser

<Project.Web.Shared.Components.IconSelector @bind-Value=selectedUser></Project.Web.Shared.Components.IconSelector>
@UI.BuildButton(this).Text("异常测试").Primary().OnClick(ThrowException).Render()
@UI.BuildButton(this).Text("ModalTest").Primary().OnClick(ShowModal).Render()
<StackPanel>
    <span>测试</span>
    <span>测试</span>
    <span>测试</span>
    <span>测试</span>
    <span>测试</span>
    <span>测试</span>
    <span>测试</span>
    <span>测试</span>
    <span>测试</span>
    <span>测试</span>
</StackPanel>
<Project.Web.Shared.Components.CameraTest></Project.Web.Shared.Components.CameraTest>
<MModal @bind-Visible=visible Title="测试">
    <h1>Modal Content</h1>
</MModal>
@code {
    [Inject] IUserService<User> UserService { get; set; }
    string[] checkedUsers;
    string selectedUser;
    bool visible;
    IEnumerable<User> users = Enumerable.Empty<User>();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var result = await UserService.GetUserListAsync(new Project.Constraints.Models.Request.GenericRequest<User>());
        users = result.Payload;
        // ArgumentNullException.ThrowIfNull(selectedUser);
    }
    Task Changed2(string[] values)
    {
        Console.WriteLine(string.Join(",", values ?? []));
        return Task.CompletedTask;
    }
    Task Changed()
    {
        Console.WriteLine(string.Join(",", checkedUsers ?? []));
        return Task.CompletedTask;
    }

    void ThrowException()
    {
        var div = 0;
        Console.WriteLine(1 / div);
    }

    async Task ShowModal()
    {
        var b = await UI.ConfirmAsync("测试", "ConfirmTest");
        if (b)
        {
            UI.AlertError("Test", "Content");
            visible = true;
        }
    }
}

<style>
    .item {
        border: solid 1px black;
        height: 300px;
    }
</style>
