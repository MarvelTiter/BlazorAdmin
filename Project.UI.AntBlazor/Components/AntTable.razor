@using AntDesign.TableModels
@using Microsoft.Extensions.Localization
@using Project.Models.Request
@typeparam TData
@typeparam TQuery where TQuery : IRequest, new()
<Card>
    <Table DataSource="Datas"
           Loading=@Options.Loading
           Bordered=@true
           Resizable=@true
           Size="@TableSize.Small"
           TItem="TData"
           ScrollX=@Options.ScrollX
           Total="@Total"
           @bind-PageIndex=@Options.Query.PageIndex
           @bind-PageSize=@Options.Query.PageSize
           @bind-SelectedRows=Options.Selected
           OnRowClick="OnRowClick"
           OnRow="RowOptions"
           HidePagination=!Options.Pager>
        <ChildContent>
            @if (Options.EnableSelection)
            {
                <Selection Fixed="left" Width="50" />
            }
            <AntTableColumns Options="Options" RowData="context" Localizer="Localizer"></AntTableColumns>
            @if (Options.Buttons?.Count > 0)
            {
                <ActionColumn Title=@(TableLocalizer["TableTips.ActionColumn"]) Fixed="right" Align="@ColumnAlign.Center" Width="@Options.ActionColumnWidth">
                    @if (Options.Buttons.Count(b => b.Visible(context)) <= 3)
                    {
                        foreach (var btn in Options.Buttons.Where(b => b.Visible(context)))
                        {
                            @CreateButton(btn, context)
                        }
                    }
                    else
                    {
                        var btns = Options.Buttons.Where(b => b.Visible(context));
                        var first = btns.First();
                        @CreateButton(first, context)
                        <Dropdown>
                            <Overlay>
                                <Menu>
                                    @foreach (var btn in btns.Skip(1))
                                    {
                                        <MenuItem>
                                            @CreateButton(btn, context)
                                        </MenuItem>
                                    }
                                </Menu>
                            </Overlay>
                            <ChildContent>
                                <a @onclick:preventDefault>
                                    @TableLocalizer["TableTips.More"] <Icon Type="down" />
                                </a>
                            </ChildContent>
                        </Dropdown>
                    }
                </ActionColumn>
            }

        </ChildContent>
        <PaginationTemplate Context="pageContext">
            <Pagination Class="@pageContext.PaginationClass"
                        Total="@pageContext.Total"
                        PageSize="@pageContext.PageSize"
                        Current="@pageContext.PageIndex"
                        ShowTotal="TotalFragment"
                        ShowSizeChanger=true
                        ShowQuickJumper=true
                        OnChange="PaginationChanged" />
        </PaginationTemplate>
    </Table>
</Card>
@code {
    [Parameter] public TableOptions<TData, TQuery> Options { get; set; }
    [Inject] IStringLocalizer<TData> Localizer { get; set; }
    [Inject] IStringLocalizer<TableOptions> TableLocalizer { get; set; }
    [Inject] ConfirmService ConfirmSrv { get; set; }
    [Inject] MessageService MessageSrv { get; set; }
    IEnumerable<TData> Datas => Options.Result?.Payload ?? Enumerable.Empty<TData>();
    int Total => Options.Result?.TotalRecord ?? 0;

    /// <summary>
    /// table总数
    /// </summary>
    Func<PaginationTotalContext, string> TotalFragment => (context) => $"{TableLocalizer["TableTips.Total"]}：{context.Total}";

    async Task PaginationChanged(PaginationEventArgs e)
    {
        Options.Query.PageIndex = e.Page;
        Options.Query.PageSize = e.PageSize;
        await Options.RefreshAsync();
    }

    /// <summary>
    /// 创建按钮
    /// </summary>
    /// <param name="definition"></param>
    /// <param name="context"></param>
    /// <returns></returns>
    public RenderFragment CreateButton(TableButton<TData> definition, TData context)
    {
        return
    @<Button Type=@definition.ButtonType
                 Size=@ButtonSize.Small
                 Danger=@definition.Danger
                 Icon=@definition.Icon
                 OnClickStopPropagation
                 OnClick=@(()=>InvokeButtonAction(definition, context))>
        @(definition.LabelExpression?.Invoke(context) ?? TableLocalizer[definition.Label])
    </Button>
    ;
    }

    public async Task InvokeButtonAction(TableButton<TData> definition, TData data)
    {
        var result = await definition.Callback.Invoke(data);
        Options.OnTableButtonClickAsync?.Invoke(definition, result);
        if (definition.Danger)
        {
            var confirmResult = await ConfirmSrv.Show(
        TableLocalizer[definition.ConfirmContent ?? "TableTips.DangerActionConfirmContent"].Value
    , TableLocalizer[definition.ConfirmTitle ?? "TableTips.DangerActionConfirmTitle"].Value);
            if (confirmResult == ConfirmResult.OK)
            {
                await CallButtonAction();
            }
        }
        else
        {
            await CallButtonAction();
        }
        async Task CallButtonAction()
        {
            var result = await definition.Callback.Invoke(data);
            if (result)
            {
                var msg = TableLocalizer["TableTips.ActionSuccess"].Value;
                _ = MessageSrv.Success(msg);
                if (Options.AutoRefreshData)
                    await Options.RefreshAsync();
            }
        }
    }

    Task OnRowClick(RowData<TData> row)
    {
        return Options.OnRowClickAsync(row.Data);
    }

    Dictionary<string, object>? RowOptions(RowData<TData> row)
    {
        return Options.AddRowOptions?.Invoke(row.Data);
    }
}
