@using AntDesign.TableModels
@using Microsoft.Extensions.Localization
@using Project.Constraints.Models.Request
@typeparam TData
@typeparam TQuery where TQuery : IRequest, new()
<Card>
    <Table DataSource="Datas"
           Loading=@Options.Loading
           Bordered=@true
           Resizable=@true
           DefaultExpandAllRows="@true"
           Size="@TableSize.Small"
           TreeChildren="@Options.TreeChildren"
           TItem="TData"
           ScrollX=@Options.ScrollX
           Total="@Total"
           @bind-PageIndex=@Options.Query.PageIndex
           @bind-PageSize=@Options.Query.PageSize
           @bind-SelectedRows=@Options.Selected
           RowKey="@Options.RowKey"
           OnRowClick="OnRowClick"
           OnRow="RowOptions"
           HidePagination=!Options.Pager>
        <ChildContent>

            @if (Options.EnableSelection)
            {
                <Selection Fixed="left" />
            }

            @* <AntTableColumns Options="Options" RowData="context" Localizer="Localizer"></AntTableColumns> *@

            @foreach (var col in Options.Columns)
            {
                @if (!(col.VisibleExpression?.Invoke(context) ?? col.Visible)) continue;
                @RenderColumn(col)
            }

            @if (Options.Buttons?.Count > 0)
            {
                <ActionColumn Title=@(TableLocalizer["TableTips.ActionColumn"]) Align="@ColumnAlign.Center" Fixed="right" Width="@Options.ActionColumnWidth">
                    @{
                        var btns = Options.Buttons.Where(b => b.CheckVisible(context)).ToList();
                        if (Options.ActionButtonColumn.HasValue)
                        {
                            <Project.Web.Shared.ComponentHelper.MGrid GridColumns="@Options.ActionButtonColumn.Value" Gap="5px">
                                @foreach (var btn in btns)
                                {
                                    @CreateButton(btn, context)
                                }
                            </Project.Web.Shared.ComponentHelper.MGrid>
                        }
                        else if (btns.Count <= 2)
                        {
                            foreach (var btn in btns)
                            {
                                @CreateButton(btn, context)
                            }
                        }
                        else
                        {
                            var first = btns[0];
                            @CreateButton(first, context)
                            <Dropdown>
                                <Overlay>
                                    <Menu>
                                        @for (var i = 1; i < btns.Count; i++)
                                        {
                                            var btn = btns[i];
                                            <MenuItem>
                                                @CreateButton(btn, context)
                                            </MenuItem>
                                        }
                                    </Menu>
                                </Overlay>
                                <ChildContent>
                                    <a @onclick:preventDefault>
                                        @TableLocalizer["TableTips.More"] <Icon Type="down" />
                                    </a>
                                </ChildContent>
                            </Dropdown>
                        }
                    }
                </ActionColumn>
            }
        </ChildContent>
        <PaginationTemplate Context="pageContext">
            <Pagination Class="@pageContext.PaginationClass"
                        Total="@pageContext.Total"
                        PageSize="@pageContext.PageSize"
                        Current="@pageContext.PageIndex"
                        ShowTotal="TotalFragment"
                        ShowSizeChanger=true
                        ShowQuickJumper=true
                        OnChange="PaginationChanged" />
        </PaginationTemplate>
    </Table>
</Card>
@code {
    [Parameter] public TableOptions<TData, TQuery> Options { get; set; }
    [Inject] IStringLocalizer<TData> Localizer { get; set; }
    [Inject] IStringLocalizer<TableOptions> TableLocalizer { get; set; }
    [Inject] ConfirmService ConfirmSrv { get; set; }
    [Inject] MessageService MessageSrv { get; set; }
    IEnumerable<TData> Datas => Options.Result?.Payload ?? Enumerable.Empty<TData>();
    int Total => Options.Result?.TotalRecord ?? 0;
    IEnumerable<TData> selected;
    bool loading;
    /// <summary>
    /// table总数
    /// </summary>
    Func<PaginationTotalContext, string> TotalFragment => (context) => $"{TableLocalizer["TableTips.Total"]}：{context.Total}";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Options.NotifyChanged = StateHasChanged;
    }

    // string GetLocalizerString()
    // {
        
    // }

    async Task PaginationChanged(PaginationEventArgs e)
    {
        Options.Query.PageIndex = e.Page;
        Options.Query.PageSize = e.PageSize;
        await Options.RefreshAsync();
    }

    /// <summary>
    /// 创建按钮
    /// </summary>
    /// <param name="definition"></param>
    /// <param name="context"></param>
    /// <returns></returns>
    public RenderFragment CreateButton(TableButton<TData> definition, TData context)
    {
        return
    @<Button Type=@definition.ButtonType
                 Size=@ButtonSize.Small
                 Danger=@definition.Danger
                 Icon=@definition.Icon
                 OnClickStopPropagation
                 OnClick=@(()=>InvokeButtonAction(definition, context))>
        @(definition.GetLabel(context) ?? TableLocalizer[definition.Label])
    </Button>
    ;
    }

    public async Task InvokeButtonAction(TableButton<TData> definition, TData data)
    {
        if (definition.Danger)
        {
            var confirmResult = await ConfirmSrv.Show(
        TableLocalizer[definition.ConfirmContent ?? "TableTips.DangerActionConfirmContent"].Value
    , TableLocalizer[definition.ConfirmTitle ?? "TableTips.DangerActionConfirmTitle"].Value);
            if (confirmResult == ConfirmResult.OK)
            {
                await CallButtonAction();
            }
        }
        else
        {
            await CallButtonAction();
        }
        async Task CallButtonAction()
        {
            var result = await definition.Callback.Invoke(data);
            Options.OnTableButtonClickAsync?.Invoke(definition, result);
            if (result)
            {
                var msg = TableLocalizer["TableTips.ActionSuccess"].Value;
                _ = MessageSrv.Success(msg);
                if (Options.AutoRefreshData)
                    await Options.RefreshAsync();
            }
        }
    }

    Task OnRowClick(RowData<TData> row)
    {
        return Options.OnRowClickAsync(row.Data);
    }

    Dictionary<string, object>? RowOptions(RowData<TData> row)
    {
        return Options.AddRowOptions?.Invoke(row.Data);
    }

    RenderFragment RenderColumn(ColumnInfo col)
    {
                if (col.IsEnum)
        {
            return RenderColumn<Enum>(col);
        }
        var type = (Nullable.GetUnderlyingType(col.DataType) ?? col.DataType).Name.ToLower();
        switch (type)
        {
            case "string":
                return RenderColumn<string>(col);
            case "int64":
                return RenderColumn<Int64?>(col);
            case "int32":
                return RenderColumn<Int32?>(col);
            case "int16":
                return RenderColumn<Int16?>(col);
            case "single":
                return RenderColumn<Single?>(col);
            case "double":
                return RenderColumn<Double?>(col);
            case "bool":
                return RenderColumn<Boolean?>(col);
            case "datetime":
                return RenderColumn<DateTime?>(col);
            default:
                return RenderColumn<string>(col);
        }

    }

    RenderFragment RenderColumn<TColumnData>(ColumnInfo col)
    {
        return
    @<Column TData="TColumnData" Ellipsis=@col.Ellipsis Width=@col.Width Sortable=@col.Sortable Title="@(Localizer[col.Label])" Fixed=@col.Fixed DataIndex="@col.PropertyOrFieldName" OnCell="GetOnCell(col)" CellRender="ColumnRender<TColumnData>(col)">
    </Column>
    ;
    }

    RenderFragment<CellData<T>> ColumnRender<T>(ColumnInfo col)
    {
        return context =>
        {
            if (col.CellTemplate != null)
            {
                return col.CellTemplate.Invoke(context.FieldValue);
            }
            string? formattedValue = null;
            if (col.IsEnum || col.EnumValues != null)
            {
                var v = context.FieldValue;
                if (v != null)
                {
                    if (col.EnumValues?.ContainsKey($"{v}") ?? false)
                    {
                        formattedValue = col.EnumValues?[$"{v}"];
                    }
                }
            }

            if (col.ValueFormat != null && context.FieldValue != null)
            {
                formattedValue = col.ValueFormat.Invoke(context.FieldValue);
            }

            if (formattedValue != null)
            {
                context.FormattedValue = formattedValue;
            }
            if (col.IsEnum || col.UseTag)
            {
                var color = col.GetTagColor(context.FieldValue);
                return@<Tag Color="@color">@context.FormattedValue</Tag>;

            }
            else if ((col.UnderlyingType ?? col.DataType) == typeof(bool))
            {
                return@<Switch Disabled Checked="@CastToBool(context.FieldValue)"></Switch>;
            }
            else
            {
                return@<span>@context.FormattedValue</span>;
            }
        };
    }

    static bool CastToBool(object? v)
    {
        if (v == null) return false;
        if (v is bool b) return b;
        return false;
    }

    static Func<CellData, Dictionary<string, object>> GetOnCell(ColumnInfo col)
    {
        if (col.AddCellOptions != null)
        {
            return c => col.AddCellOptions.Invoke(c.FormattedValue);
        }
        else
        {
            return c => null;
        }
    }
}
