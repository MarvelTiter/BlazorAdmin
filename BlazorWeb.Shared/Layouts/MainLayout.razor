@using BlazorWeb.Shared.Layouts.LayoutComponents
@using BlazorWeb.Shared.Layouts.Layouts
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using System.Globalization;
@inherits LayoutComponentBase
@layout AuthorizedLayout
@inject RouterStore Store
@inject AppStore App

<PageTitle>@($"管理系统 - {Store.Current?.RouteName ?? "主页"}")</PageTitle>

    <CascadingValue Value="this">

        <div class="page">

            @if (App.Mode == LayoutMode.Classic)
        {
            <ClassicLayout @ref=layout>
                @*@Body*@
            </ClassicLayout>
        }
        else if (App.Mode == LayoutMode.Card)
        {
            <CardLayout @ref=layout>
                @*@Body*@
            </CardLayout>
        }
        else if (App.Mode == LayoutMode.Line)
        {
            <LineLayout @ref=layout>
                @*@Body*@
            </LineLayout>
        }
        else
        {
            <div style="height:100vh; width:100vw;display: flex; align-items: center;justify-content: center;">
                <Spin Spinning Tip="初始化中……">
                 </Spin>
             </div>
        }
    </div>
</CascadingValue>

@code {
    //[Inject] public ProtectedLocalStorage Storage { get; set; }
    //[Inject] public NavigationManager NavigationManager { get; set; }
    LayoutBase? layout;
    //bool done;
    bool Loading => false;//!App.Mode.HasValue || !done;
                          //protected override async Task OnAfterRenderAsync(bool firstRender)
                          //{
                          //    await base.OnAfterRenderAsync(firstRender);
                          //    return;
                          //    if (firstRender)
                          //    {
                          //        try
                          //        {
                          //            var result = await Storage.GetAsync<AppStore>(AppStore.KEY);
                          //            if (result.Success && result.Value != null)
                          //            {
                          //                App.Mode = result.Value.Mode;
                          //                App.Collapsed = result.Value.Collapsed;
                          //                App.AppLanguage = result.Value.AppLanguage;
                          //                CultureInfo.DefaultThreadCurrentUICulture = CultureInfo.GetCultureInfo(App.AppLanguage);
                          //                if (!result.Value.Init)
                          //                {
                          //                    App.Init = true;
                          //                    await Storage.SetAsync(AppStore.KEY, App);
                          //                    NavigationManager.NavigateTo(NavigationManager.Uri, true);
                          //                }
                          //                else
                          //                {
                          //                    App.Init = false;
                          //                    await Storage.SetAsync(AppStore.KEY, App);
                          //                    done = true;
                          //                }
                          //            }
                          //            else
                          //            {
                          //                App.Mode = LayoutMode.Card;
                          //                done = true;
                          //            }
                          //        }
                          //        catch
                          //        {
                          //            App.Mode = LayoutMode.Card;
                          //        }
                          //        finally
                          //        {
                          //            StateHasChanged();
                          //            layout?.Banner?.UpdateToggleMenu(App.Collapsed);
                          //        }
                          //    }
    //}
}