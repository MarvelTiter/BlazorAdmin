@using BlazorWeb.Shared.Layouts.LayoutComponents
@using BlazorWeb.Shared.Layouts.Layouts
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inherits LayoutComponentBase
@layout AuthorizedLayout
@inject RouterStore Store
@inject AppStore App

<PageTitle>@($"管理系统 - {Store.Current?.RouteName ?? "主页"}")</PageTitle>

    <CascadingValue Value="this">

        <div class="page" style="@(Loading ? "display:none":"display:block")">
         @*   @if (App.Mode == LayoutMode.Classic)
        {
            <ClassicLayout ChildContent="Body" @ref=layout>
            </ClassicLayout>
        }
        else if (App.Mode == LayoutMode.Card)
        {
            <CardLayout ChildContent="Body" @ref=layout>
            </CardLayout>
        }
        else
        {
            <LineLayout ChildContent="Body" @ref=layout>
            </LineLayout>
        }*@
        @if (App.Mode == LayoutMode.Classic)
        {
            <ClassicLayout @ref=layout>
                @*@Body*@
            </ClassicLayout>
        }
        else if (App.Mode == LayoutMode.Card)
        {
            <CardLayout @ref=layout>
                @*@Body*@
            </CardLayout>
        }
        else
        {
            <LineLayout @ref=layout>
                @*@Body*@
            </LineLayout>
        }
    </div>

    @if (Loading)
    {
        <div style="height:100vh; width:100vw;display: flex; align-items: center;justify-content: center;">
            <Spin Spinning Tip="初始化中……">
            </Spin>
        </div>
    }
</CascadingValue>

@code {
    [Inject] public ProtectedLocalStorage Storage { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }
    LayoutBase? layout;
    bool Loading => !App.Mode.HasValue;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            try
            {
                var result = await Storage.GetAsync<AppStore>(AppStore.KEY);
                if (result.Success && result.Value != null)
                {
                    App.Mode = result.Value.Mode;
                    App.Collapsed = result.Value.Collapsed;
                }
                else
                {
                    App.Mode = LayoutMode.Card;
                }
            }
            catch
            {
                App.Mode = LayoutMode.Card;
            }
            finally
            {
                StateHasChanged();
                layout?.Banner?.UpdateToggleMenu(App.Collapsed);
            }
        }
    }
}