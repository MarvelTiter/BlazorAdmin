@using BlazorWeb.Shared.Utils;
@using Project.AppCore.Auth
@using Project.AppCore.Services;
@using Project.Common
@using Project.Models.Permissions;
@inject EventDispatcher dispatcher
@inject UserStore store
@inject AuthenticationStateProvider Auth
@inject ILoginService LoginSrv
@inject IUserService UserSrv
@inject IStringLocalizer<Profile> Localizer
@inject ModalService ModalSrv
<Dropdown Trigger=@(new Trigger[]{Trigger.Click}) Style="display:unset;" HiddenMode>
    <Overlay>
        <Menu>
            <MenuItem OnClick="HandlePwdModify">
                <div class="menu-item green-tag">@Localizer["NavMenu.UserAction.ModifyPassword"]</div>
            </MenuItem>
            <MenuItem OnClick="HandleLogout">
                <div class="menu-item red-tag">@Localizer["NavMenu.UserAction.Logout"]</div>
            </MenuItem>
        </Menu>
    </Overlay>
    <ChildContent>
        <div class="wrapper">
            <img class="avatar" src="/_content/BlazorWeb.Shared/assets/avator.png" />
            <span class="name">@DisplayName</span>
        </div>
    </ChildContent>
</Dropdown>

@code {
    private string DisplayName => store.UserDisplayName;

    public async Task HandleLogout()
    {
        await LoginSrv.LogoutAsync();
        store.ClearUser();
        await ((CustomAuthenticationStateProvider)Auth).ClearState();
    }

    async Task HandlePwdModify()
    {
        var pwd = await ModalSrv.OpenDialog<ModifyUserPassword, UserPwd>(Localizer["UserPwd.Title"]);
        await UserSrv.ModifyUserPasswordAsync(store.UserInfo!.UserId, pwd.OldPassword, pwd.Password);
    }
}
<style>
    .ant-menu-title-content {
        flex: 1;
    }
</style>