@using Project.AppCore.Routers;
@inject AppStore App
@implements IDisposable
<div class="side_bar @Class" style="display: flex;flex-direction: column;width:@Width">
    @TopBanner
    <ScrollBar>
        <Menu Theme="@MenuTheme.Light" Mode="@(Horizontal?MenuMode.Horizontal :MenuMode.Inline)" InlineCollapsed=collapse Style="flex: 1;">
            @foreach (var item in RouteStore.Menus.Where(m => m.Group == "ROOT"))
            {
                <SideBarItem Route=item></SideBarItem>
            }
        </Menu>
    </ScrollBar>
</div>

@code {
    [Parameter] public RenderFragment TopBanner { get; set; }
    [Parameter] public string Class { get; set; }
    [Parameter] public bool Horizontal { get; set; }
    [Inject] RouterStore RouteStore { get; set; }
    protected override Task OnInitializedAsync()
    {
        RouteStore.DataChangedEvent += StateHasChanged;
        return base.OnInitializedAsync();
    }

    private string Width => collapse ? 80.ToPixel() : App.SideBarExpandWidth.ToPixel();
    private bool collapse = false;

    public void ToggleCollapse(bool newState)
    {
        collapse = newState;
        StateHasChanged();
    }

    // private Task OnMenuItemClick(MenuItem item)
    // {
    //     routeStore.TryAddTopLink(item.RouterLink, item.Title);
    //     return Task.CompletedTask;
    // }

    private bool disposedValue;
    protected virtual void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
                // 释放托管状态(托管对象)
                RouteStore.DataChangedEvent -= StateHasChanged;
            }

            // 释放未托管的资源(未托管的对象)并重写终结器
            // 将大型字段设置为 null
            disposedValue = true;
        }
    }
    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }
}

