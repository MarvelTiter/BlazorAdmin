@inject EventDispatcher dispatcher
@inject RouterStore routeStore
@inject AppStore App
@implements IDisposable
<div class="side_bar @Class" style="display: flex;flex-direction: column;width:@Width">
    @TopBanner
    <Menu Theme="@MenuTheme.Light" Mode="@(Horizontal?MenuMode.Horizontal :MenuMode.Inline)" InlineCollapsed=collapse Style="flex: 1;" OnMenuItemClicked="OnMenuItemClick">
        @*<Profile></Profile>*@
        @*<MenuItem RouterLink="/" RouterMatch="NavLinkMatch.All" Title="主页">
        <IconTemplate>
        <SvgIcon ClassName="nav-icon" IconName="home"></SvgIcon>
        </IconTemplate>
        </MenuItem>*@
        @foreach (var item in routeStore.Routers)
        {
            <SideBarItem Route=item></SideBarItem>
        }
    </Menu>
</div>

@code {
    [Parameter] public RenderFragment TopBanner { get; set; }
    [Parameter] public string Class { get; set; }
    [Parameter] public bool Horizontal { get; set; }
    protected override Task OnInitializedAsync()
    {
        dispatcher.Register<SideBar>("MenuCollapse", ToggleMenuCollapse);
        routeStore.DataChangedEvent += StateHasChanged;
        return base.OnInitializedAsync();
    }

    private string Width => collapse ? 80.ToPixel() : App.SideBarExpandWidth.ToPixel();
    private bool collapse = false;

    private Task<object> ToggleMenuCollapse(object sender, object e)
    {
        collapse = (bool)e;
        StateHasChanged();
        return Task.FromResult<object>(0);
    }

    public void ToggleCollapse(bool newState)
    {
        collapse = newState;
        StateHasChanged();
    }

    private async Task OnMenuItemClick(MenuItem item)
    {
        await routeStore.TryAdd(item.RouterLink);
    }
    private bool disposedValue;
    protected virtual void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
                // 释放托管状态(托管对象)
                routeStore.DataChangedEvent -= StateHasChanged;
            }

            // 释放未托管的资源(未托管的对象)并重写终结器
            // 将大型字段设置为 null
            disposedValue = true;
        }
    }
    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }
}

