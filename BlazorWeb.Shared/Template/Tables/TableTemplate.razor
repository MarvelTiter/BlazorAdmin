@using AntDesign.TableModels
@using AntDesign.Core.Helpers.MemberPath
@using BlazorWeb.Shared.Template.Tables.Setting
@typeparam TData
@typeparam TQuery
<div class="queryarea">
	<div class="condition">
		<Space>
			@if (QueryArea != null)
			{
				<SpaceItem>
					@QueryArea(TableOptions.Query)
				</SpaceItem>
			}
			@if (TableOptions.DataLoader != null)
			{
				@if (EnableGenerateQuery)
				{
					<SpaceItem>
						<ConditionBuilder Columns=@TableOptions.Columns @bind-Info="conditionInfo"></ConditionBuilder>
					</SpaceItem>
				}
				<SpaceItem>
					<Button Type="@ButtonType.Primary" OnClick="Search">查询</Button>
				</SpaceItem>
				@if (EnableGenerateQuery)
				{
					<SpaceItem>
						<Button OnClick=@(()=>AdvanceModalVisible = true)>高级查询</Button>
					</SpaceItem>
				}
			}
			@if (TableOptions.ExportDataLoader != null || !TableOptions.Page)
			{
				<SpaceItem>
					<Button Type="@ButtonType.Primary" OnClick="Export">导出</Button>
				</SpaceItem>
			}
		</Space>
	</div>
	<div class="rightbutton">
		@if (TableOptions.AddHandle != null)
		{
			<Button Type="@ButtonType.Primary" OnClick=HandleAdd>新增</Button>
		}
	</div>
</div>
<Card Class="layout-card mt-10">
	<Table DataSource=@TableOptions.Datas
		   Loading=@loading
		   TItem=TData
		   Bordered
		   OnRow=@TableOptions.OnRow
		   ScrollX=@TableOptions.ScrollX
		   Size="@TableSize.Small"
		   SelectedRows=@TableOptions.Selected
		   OnRowClick=OnRowClickHandle
		   @bind-PageSize=@TableOptions.Query.PageSize
		   OnPageIndexChange=HandleChange
		   OnPageSizeChange=HandleChange>
		<ChildContent>
			@{
				// 选择列
				if (TableOptions.EnableSelection)
				{
					<Selection Fixed="left" Width="50" />
				}
				if (TableOptions.IsDataTableSource)
				{
					foreach (var col in TableOptions.Columns)
					{
						<Column TData="object" OnCell=@col.OnCell Width=@col.Width Title="@col.Label" Fixed=@col.Fixed DataIndex=@($"['{col.PropertyOrFieldName}']") CellRender="ColumnRender<object>(col)">
						</Column>
							//@if (col.IsEnum || col.EnumValues != null)
							//{
							//	var v = PathHelper.GetDelegate($"['{col.PropertyOrFieldName}']", typeof(TData)).Invoke(context);
							//	if (v != null)
							//	{
							//		<span>@col.EnumValues[v.ToString()!]</span>
							//	}
							//}
							//else
							//{
							//	<span>@PathHelper.GetDelegate($"['{col.PropertyOrFieldName}']", typeof(TData)).Invoke(context)</span>
							//}
					}
				}
				else
				{
					foreach (var col in TableOptions.Columns)
					{
						@if (col.IsEnum)
						{
							<Column TData="Enum" OnCell=@col.OnCell Width=@col.Width Title="@col.Label" Fixed=@col.Fixed DataIndex="@col.PropertyOrFieldName" CellRender="ColumnRender<Enum>(col)">
							</Column>
							continue;
						}
						var type = col.DataType.Name.ToLower();
						switch (type)
						{
							case "string":
								<Column TData="String" OnCell=@col.OnCell Width=@col.Width Title="@col.Label" Fixed=@col.Fixed DataIndex="@col.PropertyOrFieldName" CellRender="ColumnRender<string>(col)">
								</Column>
								break;
							case "int32":
								<Column TData="Int32?" OnCell=@col.OnCell Width=@col.Width Title="@col.Label" Fixed=@col.Fixed DataIndex="@col.PropertyOrFieldName" CellRender="ColumnRender<Int32?>(col)">
								</Column>
								break;
							case "int16":
								<Column TData="Int16?" OnCell=@col.OnCell Width=@col.Width Title="@col.Label" Fixed=@col.Fixed DataIndex="@col.PropertyOrFieldName" CellRender="ColumnRender<Int16?>(col)">
								</Column>
								break;
							case "bool":
								<Column TData="Boolean?" OnCell=@col.OnCell Width=@col.Width Title="@col.Label" Fixed=@col.Fixed DataIndex="@col.PropertyOrFieldName" CellRender="ColumnRender<Boolean?>(col)">
								</Column>
								break;
							case "datetime":
								<Column TData="DateTime?" OnCell=@col.OnCell Width=@col.Width Title="@col.Label" Fixed=@col.Fixed DataIndex="@col.PropertyOrFieldName"></Column>
								break;
						}
					}
				}
				// 按钮列
				if (TableOptions.Buttons.Count > 0)
				{
					<ActionColumn Title="操作" Fixed="right" Width=100>
						@if (TableOptions.Buttons.Count <= 3)
						{
							<Space Size=@("small")>
								@foreach (var btn in TableOptions.Buttons)
								{
									<SpaceItem>
										@CreateButton(btn, context)
									</SpaceItem>
								}
							</Space>
						}
						else
						{
							<Dropdown>
								<Overlay>
									<Menu>
										@foreach (var btn in TableOptions.Buttons)
										{
											<MenuItem>
												@CreateButton(btn, context)
											</MenuItem>
										}
									</Menu>
								</Overlay>
								<ChildContent>
									<a @onclick:preventDefault>
										更多 <Icon Type="down" />
									</a>
								</ChildContent>
							</Dropdown>
						}
					</ActionColumn>
				}
			}
		</ChildContent>
		<PaginationTemplate>
			<Pagination Class="mt-10"
						Size="small"
						ShowSizeChanger
						ShowQuickJumper
						Current=@TableOptions.Query.PageIndex
						PageSize=@TableOptions.Query.PageSize
						Total=@TableOptions.Total
						ShowTotal=totalFragment
						OnChange=PagingStatusChanged></Pagination>
		</PaginationTemplate>
	</Table>
</Card>
@if (EnableGenerateQuery)
{
	<Modal Visible="AdvanceModalVisible" OnCancel=@(()=>AdvanceModalVisible = false) Title="高级查询" Footer=null>
		<ConditionGroup Columns=@TableOptions.Columns
					TData=TData
					@bind-Expression="ConditionExpression"
					ShowExportButton=@(TableOptions.ExportDataLoader != null || !TableOptions.Page)
					OnConfirmToSearch=AdvanceSearch
					OnConfirmToExport=AdvanceExport>
		</ConditionGroup>
	</Modal>
}
@code {
	public RenderFragment CreateButton(ButtonDefinition<TData> definition, TData context)
	{
		return
	@<Button Type=@definition.ButtonType
			 Size=@ButtonSize.Small
			 Danger=@definition.NeedConfirm
			 Icon=@definition.Icon
			 	OnClickStopPropagation
			 OnClick=@(()=>InvokeButtonAction(definition.Callback, context))>
		@definition.Label
	</Button>
	;
	}

	public async Task InvokeButtonAction(Func<TData, Task> func, TData data)
	{
		await func.Invoke(data);
		if (TableOptions.AutoRefreshData)
		{
			await RefreshData();
		}
	}

	public async Task HandleAdd()
	{
		await TableOptions.AddHandle();
		if (TableOptions.AutoRefreshData)
		{
			await RefreshData();
		}
	}

	RenderFragment<PaginationTotalContext> totalFragment => (context) =>
										{
											return
	@<span>总记录数：@context.Total</span>
		;
										};

	
	RenderFragment<CellData<T>> ColumnRender<T>(ColumnDefinition col)
	{
		return context =>
	{
		var formattedValue = "";
		if (col.IsEnum || col.EnumValues != null)
		{
			var v = context.FieldValue;
			if (v != null)
			{
				if (col.EnumValues.ContainsKey($"{v}"))
				{
					formattedValue = col.EnumValues[$"{v}"];
				}
			}
			context.FormattedValue = formattedValue;
		}
		return
	@<span>@context.FormattedValue</span>
	;
	};
	}

	public async Task PagingStatusChanged(PaginationEventArgs e)
	{
		if (e.Page != TableOptions.Query.PageIndex)
			TableOptions.Query.PageIndex = e.Page;
		if (e.PageSize != TableOptions.Query.PageSize)
			TableOptions.Query.PageSize = e.PageSize;
		await Search();
	}
}